import React, {useState, useEffect} from 'react'
import {getShows} from '@/services/getShows'
import {getShowById} from '@/services/getShowById'
import { motion } from 'framer-motion'
import Head from 'next/head'
import Layout from '@/components/layout'
import Hero from '@/components/Hero'
import MovieCard from '@/components/MovieCard'
import ListContainer from '@/components/ListContainer'
import Spinner from 'react-bootstrap/Spinner';
import CustomDropdown from '@/components/Dropdown'
import FormModal from '@/components/Modal'


export default function Home () {
  const [data, setData] = useState()
  const [shows, setShows] = useState([])
  const [loading, setLoading] = useState(true)
  const [selected, setSelected] = useState('POPULARES');
  const [open, setOpen] = useState(false);
  const [addedMovies, setAddedMovies] = useState([]);
  const [showModal, setShowModal] = useState(false);
  const [openDrawer, setOpenDrawer] = useState(false);
  const today = new Date();

  const getTvShow = async () => {
    setLoading(true)
    const response = await getShowById();
    const tvShow = response.data;
    setData(tvShow)
    setLoading(false)
  }

  const getPopular = async () => {
    setLoading(true)
    const response = await getShows();
    const popularShows = response.data.results.slice(0, 4)
    setShows(popularShows)
    setLoading(false)
  }

  useEffect(() => {
    getTvShow()
    getPopular()
  }, [])

  useEffect(() => {
    let storedData = localStorage.getItem('movies');
    if (storedData) {
      try {
        const parsedData = JSON.parse(storedData)
        setAddedMovies(parsedData);
      } catch (error) {
        setAddedMovies([])
        console.error(error);
      }
    }
  }, []);

  return (
    <Layout setShowModal={setShowModal} setOpenDrawer={setOpenDrawer} openDrawer={openDrawer}>
      <Head>
        <title>Liteflix</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="preconnect" href="https://fonts.googleapis.com" />
        <link rel="preconnect" href="https://fonts.gstatic.com" crossorigin />
        <link href="https://fonts.googleapis.com/css2?family=Bebas+Neue&display=swap" rel="stylesheet"></link>
      </Head>
      <FormModal setMovies={setAddedMovies} setOpenDrawer={setOpenDrawer} movies={addedMovies} showModal={showModal} setShowModal={setShowModal} />
      {loading && !data ? (
        <Spinner animation="grow" color='#64EEBC' className='mx-auto' />
      ) : (
        <>
          <Hero movieTitle={data.name} />
          <div className='right-container'>
            <CustomDropdown selected={selected} setSelected={setSelected} open={open} setOpen={setOpen} />
            {selected === 'POPULARES' ? (
              <ListContainer>
                {shows.map((item, index) => (
                  <motion.div
                    initial={{y: -100}} 
                    animate={{ y: 0 }}  
                    transition={{ ease: "easeOut", duration: 3/(index + 1)}} 
                  >
                    <MovieCard date={item.first_air_date} votes={item.vote_average} title={item.name} image={`https://image.tmdb.org/t/p/original${item.poster_path}`} /> 
                  </motion.div>        
                ))}
              </ListContainer>
            ) : (
              <ListContainer>
                {addedMovies.length ? (
                  addedMovies.map(item => (
                    <MovieCard title={item.name} votes={10} image={item.image} date={today} /> 
                  ))
                ) : (
                  <p className='empty'>No hay pel√≠culas agregadas</p>
                )}
              </ListContainer>
            )}
          
          </div>
        </>
      )} 
    </Layout>
  )
}
